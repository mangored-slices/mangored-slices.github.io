// Generated by CoffeeScript 1.6.3
(function() {
  var NDialog,
    __slice = [].slice;

  NDialog = (function() {
    NDialog.version = "0.0.1";

    NDialog.instance = null;

    NDialog.close = function() {
      if (this.instance) {
        this.instance.close();
        return this.instance = null;
      }
    };

    NDialog.open = function(options) {
      if (options == null) {
        options = {};
      }
      return new NDialog(options);
    };

    NDialog.configure = function(options) {
      if (options == null) {
        options = {};
      }
      $.extend(NDialog.prototype.options, options);
      return this;
    };

    NDialog.prototype.$el = null;

    NDialog.prototype.$popup = null;

    NDialog.prototype.$screen = null;

    NDialog.prototype.options = {
      zIndex: 1000,
      margin: [10, 10],
      explicitSize: false,
      "class": '',
      template: function(data) {
        return data.html;
      },
      defaultContent: '',
      escapable: true
    };

    function NDialog(options) {
      if (options == null) {
        options = {};
      }
      NDialog.close();
      NDialog.instance = this;
      $.extend(this.options, options);
      this.render();
      if (options.url) {
        this.load(options.url);
      } else if (options.html) {
        this.setHTML(options.html);
      }
      this;
    }

    NDialog.prototype.render = function() {
      this.$el = $("<div class='ndialog'>").addClass(this.options["class"]).addClass('loading').css({
        position: 'absolute',
        top: 0,
        left: 0,
        zIndex: this.options.zIndex
      }).appendTo($("body"));
      this.$screen = $("<div class='ndialog-screen'>").css({
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: 1
      }).appendTo(this.$el);
      this.$popup = $("<div class='ndialog-popup'>").css({
        position: 'absolute'
      }).css({
        zIndex: 2
      }).html(this.options.defaultContent).appendTo(this.$el);
      this.reposition();
      this.bindEvents();
      this.trigger('open', {
        dialog: this
      });
      return this;
    };

    NDialog.prototype.close = function() {
      if (!(this.$el.parent().length > 0)) {
        return;
      }
      this.unbindEvents();
      this.trigger('close', {
        dialog: this
      });
      this.$el.remove();
      return this;
    };

    NDialog.prototype.bindEvents = function() {
      var _this = this;
      $(window).on('resize.ndialog', function() {
        return _this.reposition();
      });
      if (this.options.escapable) {
        this.$screen.on('dblclick.ndialog', function(e) {
          e.preventDefault();
          return _this.close();
        });
        $(document).on('keydown.ndialog', function(e) {
          if (e.keyCode === 27) {
            return _this.close();
          }
        });
      }
      this.$el.on('click.ndialog', "[role='close']", function(e) {
        e.preventDefault();
        return _this.close();
      });
      return this;
    };

    NDialog.prototype.unbindEvents = function() {
      $(window).off('resize.ndialog');
      $(document).off('keydown.ndialog');
      return this;
    };

    NDialog.prototype.setHTML = function(html) {
      this.$el.removeClass('loading').addClass('loaded');
      this.$popup.html(this.options.template({
        html: html
      }));
      this.trigger('content', {
        dialog: this
      });
      this.reposition();
      this.autofocus();
      return this;
    };

    NDialog.prototype.autofocus = function() {
      var _ref;
      return (_ref = this.$popup.find('[autofocus]').get(0)) != null ? _ref.focus() : void 0;
    };

    NDialog.prototype.load = function(url, options) {
      var newOptions,
        _this = this;
      if (options == null) {
        options = {};
      }
      newOptions = {
        complete: function(xhr, status) {
          if (status === 'success') {
            return _this.setHTML(xhr.responseText);
          } else {
            return _this.trigger('error', {
              dialog: _this,
              status: status,
              xhr: xhr
            });
          }
        }
      };
      newOptions = $.extend({}, options, newOptions);
      return $.ajax(url, newOptions);
    };

    NDialog.prototype.resize = function() {
      this.$popup.css({
        width: '',
        height: ''
      });
      if (this.options.explicitSize) {
        this.$popup.css({
          boxSizing: 'border-box',
          width: this.$popup.outerWidth(),
          height: this.$popup.outerHeight()
        });
      }
      return this;
    };

    NDialog.prototype.reposition = function() {
      var marginLeft, marginTop, offset, popup, viewport, _ref;
      this.resize();
      popup = {
        width: this.$popup.outerWidth(),
        height: this.$popup.outerHeight()
      };
      viewport = {
        width: $(window).width(),
        height: $(window).height()
      };
      offset = {
        top: $(window).scrollTop()
      };
      _ref = this.options.margin, marginTop = _ref[0], marginLeft = _ref[1];
      this.$el.hide().css({
        width: $(document).width(),
        height: $(document).height(),
        display: 'block'
      });
      this.$popup.css({
        left: parseInt(Math.max(marginLeft, (viewport.width - popup.width) / 2)),
        top: parseInt(offset.top + Math.max(marginTop, (viewport.height - popup.height) / 2))
      });
      return this;
    };

    NDialog.prototype.on = function() {
      var args, event, _ref;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      (_ref = this.$el).on.apply(_ref, ["ndialog:" + event].concat(__slice.call(args)));
      return this;
    };

    NDialog.prototype.off = function() {
      var args, event, _ref;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      (_ref = this.$el).off.apply(_ref, ["ndialog:" + event].concat(__slice.call(args)));
      return this;
    };

    NDialog.prototype.trigger = function(event, options) {
      var _ref;
      if (options == null) {
        options = {};
      }
      if ((_ref = this.$el) != null) {
        _ref.trigger($.Event("ndialog:" + event, options));
      }
      return this;
    };

    NDialog.on = function() {
      var args, event, _ref;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      (_ref = $(document)).on.apply(_ref, ["ndialog:" + event, '.ndialog'].concat(__slice.call(args)));
      return this;
    };

    NDialog.off = function() {
      var args, event, _ref;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      (_ref = $(document)).off.apply(_ref, ["ndialog:" + event, '.ndialog'].concat(__slice.call(args)));
      return this;
    };

    NDialog.register = function(selector, options) {
      if (options == null) {
        options = {};
      }
      return $(document).on('click.ndialog', selector, function(e) {
        var dialog, opts;
        if (options.condition != null) {
          if (!options.condition()) {
            return true;
          }
        }
        e.preventDefault();
        opts = {
          url: $(this).attr('href')
        };
        dialog = new NDialog($.extend({}, options, opts));
        if (options.onopen) {
          return options.onopen(dialog);
        }
      });
    };

    return NDialog;

  })();

  jQuery.fn.ndialog = function(options) {
    if (options == null) {
      options = {};
    }
    return NDialog.register(this.selector, options);
  };

  window.NDialog = NDialog;

}).call(this);
